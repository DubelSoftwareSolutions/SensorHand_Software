/*
 * DataProcessing.c
 *
 *  Created on: 29.04.2017
 *      Author: Krzysztof
 */

#include "math.h"
#include "adc.h"
#include "dma.h"
#include "MeasurementStruct.h"
#include "Measurements.h"
#include "Accelerometer.h"
#include "DataProcessing.h"

uint16_t g_ThumbMinReadings[3] = {3100,1900,1900};
uint16_t g_ThumbMaxReadings[3] = {2100,2860,2860};
float g_ThumbMinAngles[3] = {0.0,0.0,0.0};
float g_ThumbMaxAngles[3] = {90.0,45.0,70.0};

uint16_t g_IndexMinReadings[3] = {1990,1820,1820};
uint16_t g_IndexMaxReadings[3] = {3120,3500,3500};
float g_IndexMinAngles[3] = {0.0,0.0,0.0};
float g_IndexMaxAngles[3] = {90.0,130.0,55.0};

uint16_t g_MiddleMinReadings[3] = {1990,1820,1820};
uint16_t g_MiddleMaxReadings[3] = {3120,3500,3500};
float g_MiddleMinAngles[3] = {0.0,0.0,0.0};
float g_MiddleMaxAngles[3] = {90.0,120.0,70.0};

s_JointAngles g_FingerJoints[FINGER_COUNT];

void ApproximateFlexMeasurementsLinear()
{
	for(uint8_t i=0; i< FINGER_JOINT_COUNT; ++i)
		g_FingerJoints[0].Joint[0] =  g_Measurements.FlexSensor[0] *
			(g_ThumbMinAngles[0]-g_ThumbMaxAngles[0]) / (g_ThumbMinReadings[0]-g_ThumbMaxReadings[0]) + g_ThumbMinAngles[0] -
			(g_ThumbMinAngles[0]-g_ThumbMaxAngles[0]) / (g_ThumbMinReadings[0]-g_ThumbMaxReadings[0]) * g_ThumbMinReadings[0];
}

void AggregateMeasurementsToVoltage()
{
	for (uint8_t i = 0; i < FLEX_SENSOR_COUNT; ++i)
		g_AggregatedMeasurements.FlexSensor[i] = (float) SUPPLY_VOLTAGE
				* g_Measurements.FlexSensor[i] / ADC_RESOLUTION; //(float)pow(2,hadc2.Init.Resolution);
	float nocnik = g_AggregatedMeasurements.FlexSensor[4];
	g_AggregatedMeasurements.FlexSensor[4] = g_AggregatedMeasurements.FlexSensor[5];
	g_AggregatedMeasurements.FlexSensor[5] = nocnik;
	/*for (uint8_t i = 0; i < TENSION_SENSOR_COUNT; ++i)
		g_AggregatedMeasurements.TensionSensor[i] = (float) SUPPLY_VOLTAGE
				* g_Measurements.TensionSensor[i] / ADC_RESOLUTION; //(float)pow(2,hadc2.Init.Resolution);*/
}

void AggregateTensionMeasurementsToColourCode()
{
	for (uint8_t i = 0; i < TENSION_SENSOR_COUNT; ++i)
			g_AggregatedMeasurements.TensionSensor[i] = 255 - g_Measurements.TensionSensor[i] * 255 / 4095;
	uint8_t nocnik = g_AggregatedMeasurements.TensionSensor[1];
	//Usunac po zamianie kanalow
	g_AggregatedMeasurements.TensionSensor[1] = g_AggregatedMeasurements.TensionSensor[2];
	g_AggregatedMeasurements.TensionSensor[2] = nocnik;
}

void AggregateAccMeasurementsTo_mps2()
{
	for (uint8_t i = 0; i < ACCELEROMETER_AXIS_COUNT; ++i)
		g_AggregatedMeasurements.Accelerometer[i] =
				(float) g_Measurements.Accelerometer[i]
						* LSM303_ACC_RESOLUTION_MPS2 / (float) INT16_MAX;
}

void AggregateMeasurements()
{
	AggregateMeasurementsToVoltage();
	AggregateTensionMeasurementsToColourCode();
	AggregateAccMeasurementsTo_mps2();
}

void ProcessDataForOutput()
{

}
